{"version":3,"sources":["Components/Counter/Counter.js","App.js","serviceWorker.js","index.js"],"names":["Counter","props","handleAddCount","count","state","setState","localStorage","setItem","JSON","stringify","handleSubtractCount","handleResetToZero","countFromLocalStorage","parse","getItem","initialCount","className","this","onClick","disabled","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yRAqEeA,G,kBAjEb,WAAYC,GAAQ,IAAD,uBACjB,4CAAMA,KASRC,eAAiB,WACf,IAAMC,EAAQ,EAAKC,MAAMD,MAAQ,EAEjC,EAAKE,SAAS,CAACF,UAEfG,aAAaC,QAAQ,QAASC,KAAKC,UAAUN,KAf5B,EAkBnBO,oBAAsB,WACpB,IAAMP,EAAQ,EAAKC,MAAMD,MAAQ,EAEjC,EAAKE,SAAS,CAACF,UAEfG,aAAaC,QAAQ,QAASC,KAAKC,UAAUN,KAvB5B,EA0BnBQ,kBAAoB,WAGlB,EAAKN,SAAS,CAACF,MAFD,IAIdG,aAAaC,QAAQ,QAASC,KAAKC,UAJrB,KAxBd,IAAMG,EAAwBJ,KAAKK,MAAMP,aAAaQ,QAAQ,UAH7C,OAKjB,EAAKV,MAAQ,CACXD,MAAOS,GAAyB,EAAKX,MAAMc,cAN5B,E,sEAsCjB,OACE,yBAAKC,UAAU,QACb,yBAAKA,UAAU,YAAf,UAAkCC,KAAKb,MAAMD,OAC7C,yBAAKa,UAAU,cACb,yBAAKA,UAAU,UACb,4BAAQA,UAAU,aAAaE,QAASD,KAAKf,gBAA7C,MAEF,yBAAKc,UAAU,UACb,4BAAQA,UAAS,UAA0B,IAArBC,KAAKb,MAAMD,MAAc,cAAgB,SAA9C,QACTe,QAASD,KAAKP,oBACdS,SAAUF,KAAKb,MAAMD,OAAS,GAFtC,MAMF,yBAAKa,UAAU,UACb,4BAAQA,UAAS,UAA0B,IAArBC,KAAKb,MAAMD,MAAc,cAAgB,SAA9C,QACTe,QAASD,KAAKN,kBACdQ,SAAUF,KAAKb,MAAMD,OAAS,GAFtC,gB,GAtDUiB,IAAMC,Y,MCSbC,MARf,WACE,OACI,yBAAKN,UAAU,OACb,kBAAC,EAAD,CAASD,aAAc,MCKXQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.88543bd2.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './Counter.css';\r\n\r\nclass Counter extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const countFromLocalStorage = JSON.parse(localStorage.getItem(\"count\"));\r\n\r\n    this.state = {\r\n      count: countFromLocalStorage || this.props.initialCount,\r\n    };\r\n  }\r\n\r\n  handleAddCount = () => {\r\n    const count = this.state.count + 1;\r\n\r\n    this.setState({count});\r\n\r\n    localStorage.setItem(\"count\", JSON.stringify(count));\r\n  };\r\n\r\n  handleSubtractCount = () => {\r\n    const count = this.state.count - 1;\r\n\r\n    this.setState({count});\r\n\r\n    localStorage.setItem(\"count\", JSON.stringify(count));\r\n  };\r\n\r\n  handleResetToZero = () => {\r\n    const count = 0;\r\n\r\n    this.setState({count});\r\n\r\n    localStorage.setItem(\"count\", JSON.stringify(count));\r\n  };\r\n\r\n  render() {\r\n    // const classNameForBtnDec = `{this.state.count === 0 ? \"btnDisabled\" : \"btnDec\"} btn`;\r\n    // const classNameForBtnRes = `{this.state.count === 0 ? \"btnDisabled\" : \"btnRes\"} btn`;\r\n\r\n    return (\r\n      <div className=\"main\">\r\n        <div className=\"countDiv\">Count: {this.state.count}</div>\r\n        <div className=\"buttonsDiv\">\r\n          <div className=\"button\">\r\n            <button className=\"btnInc btn\" onClick={this.handleAddCount}>+</button>\r\n          </div>\r\n          <div className=\"button\">\r\n            <button className={`${this.state.count === 0 ? \"btnDisabled\" : \"btnDec\"} btn`}\r\n                    onClick={this.handleSubtractCount}\r\n                    disabled={this.state.count <= 0}>\r\n              -\r\n            </button>\r\n          </div>\r\n          <div className=\"button\">\r\n            <button className={`${this.state.count === 0 ? \"btnDisabled\" : \"btnRes\"} btn`}\r\n                    onClick={this.handleResetToZero}\r\n                    disabled={this.state.count <= 0}>\r\n              Reset\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Counter;","import React from 'react';\nimport Counter from './Components/Counter/Counter';\nimport './App.css';\n\nfunction App() {\n  return (\n      <div className=\"App\">\n        <Counter initialCount={0}/>\n      </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}